version: "3.9"

services:
  postgres:
    container_name: postgres
    image: postgres
    restart: always
    command:
      - "postgres"
      - "-c"
      - "max_connections=10"
      - "-c"
      - "shared_buffers=100MB"
      - "-c"
      - "effective_cache_size=0.5GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=1GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    env_file:
      - ./.env
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 200M
    networks:
      - main-network

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - ${REDIS_PORT}:6379
    env_file:
      - ./.env
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - main-network
  #    volumes:
  #      - "${REDIS_DATA_DIR:-./data}:/data"
  #      - "./redis.conf:/usr/local/etc/redis/redis.conf"

#  minio:
#    image: minio/minio
#    ports:
#      - ${MINIO_PORT}:9000
#    environment:
#      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY_ID}
#      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_ACCESS_KEY}
#    volumes:
#      - minio_data:/data
#    command: server /data
#    env_file:
#      - ./.env

  converter:
    #    platform: linux/amd64
    #    image: fitzplsr/mgtu-ecg:latest
    container_name: converter
    build:
      context: ./edfconverter
      dockerfile: Dockerfile
    restart: always
    volumes:
      - "./files/inputs:/inputs"
    ports:
      - '8081:8081'
    env_file:
      - ./.env
    networks:
      - main-network

  analyser:
    container_name: analyser
    build:
      context: ./models/cnn
      dockerfile: Dockerfile
    restart: always
    volumes:
      - "./files/inputs:/inputs"
    ports:
      - '8082:8082'
    env_file:
      - ./.env
    networks:
      - main-network

  backend:
#    platform: linux/amd64
#    image: fitzplsr/mgtu-ecg:latest
    container_name: backend
    build:
      context: .
      dockerfile: ./build/Dockerfile
    restart: always
    volumes:
      - "./files:/docker-main/files"
    ports:
      - '4000:4000'
      - '2112:2112'
    depends_on:
      - postgres
      - redis
      - converter
    env_file:
      - ./.env
    networks:
      - main-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: [ "9090:9090" ]
    depends_on: [ backend, node_exporter, postgres_exporter ]
    networks:
      - main-network

  grafana:
    image: grafana/grafana:latest
    ports: [ "3000:3000" ]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/dashboards-json:/var/lib/grafana/dashboards:ro
    depends_on: [ prometheus ]
    networks:
      - main-network

  node_exporter:
    image: prom/node-exporter:latest
    command: [ "--path.rootfs=/host" ]
#    network_mode: "host"
    pid: "host"
    volumes:
      - /:/host:ro,rslave
    networks:
      - main-network

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    env_file: .env
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable
    depends_on: [ postgres ]
    ports: [ "9187:9187" ]
    networks:
      - main-network

networks:
  main-network:
    driver: bridge

#volumes:
#  minio_data:
