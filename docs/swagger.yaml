basePath: /
definitions:
  model.AuthResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.Role:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - RoleAnonymous
    - RoleAdmin
    - RoleUser
  model.SignInPayload:
    properties:
      login:
        maxLength: 30
        minLength: 6
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - login
    - password
    type: object
  model.SignUpPayload:
    properties:
      login:
        maxLength: 30
        minLength: 6
        type: string
      name:
        maxLength: 30
        minLength: 2
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - login
    - name
    - password
    type: object
  model.UpdatePasswordPayload:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    type: object
  model.UpdateRolePayload:
    properties:
      role:
        $ref: '#/definitions/model.Role'
    type: object
  model.User:
    properties:
      created_at:
        type: string
      login:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/model.Role'
      updated_at:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user
      parameters:
      - description: Login credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.SignInPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Sign In
      tags:
      - auth
  /api/v1/auth/signup:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.SignUpPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Sign up a new user
      tags:
      - auth
  /api/v1/auth/update/password:
    put:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: New password details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.UpdatePasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Password
      tags:
      - auth
  /api/v1/auth/update/role:
    put:
      consumes:
      - application/json
      description: Change user role
      parameters:
      - description: New role details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRolePayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Role
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
