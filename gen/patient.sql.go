// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patient.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (name, surname, bdate)
VALUES ($1, $2, $3)
RETURNING id, name, surname, bdate, created_at, updated_at
`

type CreatePatientParams struct {
	Name    string
	Surname pgtype.Text
	Bdate   pgtype.Date
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRow(ctx, createPatient, arg.Name, arg.Surname, arg.Bdate)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Bdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPatientByID = `-- name: GetPatientByID :one
SELECT id, name, surname, bdate, created_at, updated_at
FROM patients
WHERE id = $1
`

func (q *Queries) GetPatientByID(ctx context.Context, id int32) (Patient, error) {
	row := q.db.QueryRow(ctx, getPatientByID, id)
	var i Patient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Bdate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPatients = `-- name: ListPatients :many
SELECT id, name, surname, bdate, created_at, updated_at
FROM patients
ORDER BY updated_at DESC
LIMIT $1 OFFSET $2
`

type ListPatientsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPatients(ctx context.Context, arg ListPatientsParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, listPatients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Bdate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchPatient = `-- name: SearchPatient :many
SELECT id, name, surname, bdate, created_at, updated_at
FROM patients
WHERE name like '%' || $1 || '%'
   or surname like '%' || $1 || '%'
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type SearchPatientParams struct {
	Column1 pgtype.Text
	Limit   int32
	Offset  int32
}

func (q *Queries) SearchPatient(ctx context.Context, arg SearchPatientParams) ([]Patient, error) {
	rows, err := q.db.Query(ctx, searchPatient, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Patient
	for rows.Next() {
		var i Patient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Bdate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
