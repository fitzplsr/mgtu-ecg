// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const create = `-- name: Create :one
INSERT INTO users (id, role, name, login, password_hash)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, role, name, login, password_hash, created_at, updated_at
`

type CreateParams struct {
	ID           pgtype.UUID
	Role         int32
	Name         string
	Login        string
	PasswordHash []byte
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (User, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ID,
		arg.Role,
		arg.Name,
		arg.Login,
		arg.PasswordHash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByID = `-- name: GetByID :one
SELECT id, role, name, login, password_hash, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getByLogin = `-- name: GetByLogin :one
SELECT id, role, name, login, password_hash, created_at, updated_at FROM users WHERE login = $1
`

func (q *Queries) GetByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, getByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const update = `-- name: Update :one
UPDATE users
SET
    role = COALESCE($1, role),
    name = COALESCE($2, name),
    login = COALESCE($3, login),
    password_hash = COALESCE($4, password_hash),
    updated_at = $5
WHERE id = $6
RETURNING id, role, name, login, password_hash, created_at, updated_at
`

type UpdateParams struct {
	Role         int32
	Name         string
	Login        string
	PasswordHash []byte
	UpdatedAt    pgtype.Timestamptz
	ID           pgtype.UUID
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (User, error) {
	row := q.db.QueryRow(ctx, update,
		arg.Role,
		arg.Name,
		arg.Login,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Name,
		&i.Login,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
