// Code generated by "enumer -type AnalyseResult"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _AnalyseResultName = "UnspecifiedTrueFalse"

var _AnalyseResultIndex = [...]uint8{0, 11, 15, 20}

const _AnalyseResultLowerName = "unspecifiedtruefalse"

func (i AnalyseResult) String() string {
	if i >= AnalyseResult(len(_AnalyseResultIndex)-1) {
		return fmt.Sprintf("AnalyseResult(%d)", i)
	}
	return _AnalyseResultName[_AnalyseResultIndex[i]:_AnalyseResultIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AnalyseResultNoOp() {
	var x [1]struct{}
	_ = x[Unspecified-(0)]
	_ = x[True-(1)]
	_ = x[False-(2)]
}

var _AnalyseResultValues = []AnalyseResult{Unspecified, True, False}

var _AnalyseResultNameToValueMap = map[string]AnalyseResult{
	_AnalyseResultName[0:11]:       Unspecified,
	_AnalyseResultLowerName[0:11]:  Unspecified,
	_AnalyseResultName[11:15]:      True,
	_AnalyseResultLowerName[11:15]: True,
	_AnalyseResultName[15:20]:      False,
	_AnalyseResultLowerName[15:20]: False,
}

var _AnalyseResultNames = []string{
	_AnalyseResultName[0:11],
	_AnalyseResultName[11:15],
	_AnalyseResultName[15:20],
}

// AnalyseResultString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnalyseResultString(s string) (AnalyseResult, error) {
	if val, ok := _AnalyseResultNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AnalyseResultNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AnalyseResult values", s)
}

// AnalyseResultValues returns all values of the enum
func AnalyseResultValues() []AnalyseResult {
	return _AnalyseResultValues
}

// AnalyseResultStrings returns a slice of all String values of the enum
func AnalyseResultStrings() []string {
	strs := make([]string, len(_AnalyseResultNames))
	copy(strs, _AnalyseResultNames)
	return strs
}

// IsAAnalyseResult returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AnalyseResult) IsAAnalyseResult() bool {
	for _, v := range _AnalyseResultValues {
		if i == v {
			return true
		}
	}
	return false
}
