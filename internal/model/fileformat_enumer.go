// Code generated by "enumer -type FileFormat"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _FileFormatName = "EDF"

var _FileFormatIndex = [...]uint8{0, 3}

const _FileFormatLowerName = "edf"

func (i FileFormat) String() string {
	i -= 1
	if i >= FileFormat(len(_FileFormatIndex)-1) {
		return fmt.Sprintf("FileFormat(%d)", i+1)
	}
	return _FileFormatName[_FileFormatIndex[i]:_FileFormatIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FileFormatNoOp() {
	var x [1]struct{}
	_ = x[EDF-(1)]
}

var _FileFormatValues = []FileFormat{EDF}

var _FileFormatNameToValueMap = map[string]FileFormat{
	_FileFormatName[0:3]:      EDF,
	_FileFormatLowerName[0:3]: EDF,
}

var _FileFormatNames = []string{
	_FileFormatName[0:3],
}

// FileFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FileFormatString(s string) (FileFormat, error) {
	if val, ok := _FileFormatNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FileFormatNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FileFormat values", s)
}

// FileFormatValues returns all values of the enum
func FileFormatValues() []FileFormat {
	return _FileFormatValues
}

// FileFormatStrings returns a slice of all String values of the enum
func FileFormatStrings() []string {
	strs := make([]string, len(_FileFormatNames))
	copy(strs, _FileFormatNames)
	return strs
}

// IsAFileFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FileFormat) IsAFileFormat() bool {
	for _, v := range _FileFormatValues {
		if i == v {
			return true
		}
	}
	return false
}
