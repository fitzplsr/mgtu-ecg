// Code generated by "enumer -type AnalyseStatus"; DO NOT EDIT.

package model

import (
	"fmt"
	"strings"
)

const _AnalyseStatusName = "CreatedSuccessFailed"

var _AnalyseStatusIndex = [...]uint8{0, 7, 14, 20}

const _AnalyseStatusLowerName = "createdsuccessfailed"

func (i AnalyseStatus) String() string {
	if i >= AnalyseStatus(len(_AnalyseStatusIndex)-1) {
		return fmt.Sprintf("AnalyseStatus(%d)", i)
	}
	return _AnalyseStatusName[_AnalyseStatusIndex[i]:_AnalyseStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AnalyseStatusNoOp() {
	var x [1]struct{}
	_ = x[Created-(0)]
	_ = x[Success-(1)]
	_ = x[Failed-(2)]
}

var _AnalyseStatusValues = []AnalyseStatus{Created, Success, Failed}

var _AnalyseStatusNameToValueMap = map[string]AnalyseStatus{
	_AnalyseStatusName[0:7]:        Created,
	_AnalyseStatusLowerName[0:7]:   Created,
	_AnalyseStatusName[7:14]:       Success,
	_AnalyseStatusLowerName[7:14]:  Success,
	_AnalyseStatusName[14:20]:      Failed,
	_AnalyseStatusLowerName[14:20]: Failed,
}

var _AnalyseStatusNames = []string{
	_AnalyseStatusName[0:7],
	_AnalyseStatusName[7:14],
	_AnalyseStatusName[14:20],
}

// AnalyseStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AnalyseStatusString(s string) (AnalyseStatus, error) {
	if val, ok := _AnalyseStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AnalyseStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AnalyseStatus values", s)
}

// AnalyseStatusValues returns all values of the enum
func AnalyseStatusValues() []AnalyseStatus {
	return _AnalyseStatusValues
}

// AnalyseStatusStrings returns a slice of all String values of the enum
func AnalyseStatusStrings() []string {
	strs := make([]string, len(_AnalyseStatusNames))
	copy(strs, _AnalyseStatusNames)
	return strs
}

// IsAAnalyseStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AnalyseStatus) IsAAnalyseStatus() bool {
	for _, v := range _AnalyseStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
